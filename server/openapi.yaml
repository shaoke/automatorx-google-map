---#openapi
openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: AutomatorX - Google Map RESTFul APIs
    url: https://virtserver.swaggerhub.com/Neo1/automatorx-google-map/1.0.0
info:
  description: Collect commuting time information
  version: "1.0.0"
  title: AutomatorX - Google Map
  contact:
    email: shaokexu@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: users
    description: all users
paths:
  /spiders:
    get:
      tags:
        - users
      summary: Get multiple spiders
      operationId: searchSpiders
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      parameters:
        - in: query
          name: page
          description: current page
          required: false
          schema:
            type: number
            default: 0
        - in: query
          name: limit
          description: Number of items per page
          required: false
          schema:
            type: number
            default: 100
        - in: query
          name: search
          description: search string
          required: false
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Spider'
        '400':
          description: bad input parameter
    post:
      tags:
        - users
      summary: add a spider
      operationId: addSpider
      description: Add a spider
      responses:
        '201':
          description: item created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: d290f1ee-6c54-4b01-90e6-d701748f0851
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spider'
        description: Inventory item to add
  /spiders/{id}:
    get:
      tags:
        - users
      summary: Get an individual spider
      operationId: getSpider
      description: Get an individual spider by spider id
      parameters:
        - in: path
          name: id
          description: spider id
          required: true
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        '200':
          description: individual spider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spider'
  /spiders/{id}/scraping:
    post:
      tags:
        - users
      summary: Get an individual spider
      operationId: scrapeSpider
      description: Get an individual spider by spider id
      parameters:
        - in: path
          name: id
          description: spider id
          required: true
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
        - in: query
          name: start
          description: whether start scraping
          required: true
          schema:
            type: boolean
      responses:
        '201':
          description: item created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: d290f1ee-6c54-4b01-90e6-d701748f0851
        '400':
          description: 'invalid input, object invalid'
  /preview:
    post:
      tags:
        - users
      summary: Get an individual spider
      operationId: preview
      description: Get a preview map
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                view:
                  type: object
                  properties:
                    width:
                      type: number
                    height:
                      type: number
                addresses:
                  type: array
                  items:
                    type: string
                    description: address
      responses:
        '200':
          description: get preview image
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    format: base64
        '400':
          description: 'invalid input, object invalid'

components:
  schemas:
    Spider:
      type: object
      description: Spider defines what data we want to spide now
      required:
        - id
        - name
        - status
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          description: spider name
          example: From Santa Clara Caltrain to Facebook
        status:
          type: string
          description: status of spider. When it is active then this means it is scraping data now
          enum: ['draft', 'valid']
          example: 'valid'
        scraping:
          type: boolean
          description: spider is scraping or not
        directions:
          type: array
          items:
            $ref: '#/components/schemas/Direction'
        settings:
          type: object
          properties:
            polling:
              type: number
              description: polling time, unit is min
              minimum: 10
              default: 10
    Direction:
      type: object
      required:
        - valid
        - value
      properties:
        valid:
          type: boolean
          description: whether this is a valid direction
          example: true
        value:
          type: string
          description: direction value
          example: Facebook, 1 Hacker Way, Menlo Park, CA 94025
